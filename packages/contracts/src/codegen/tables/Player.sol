// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("Player")));
bytes32 constant PlayerTableId = _tableId;

struct PlayerData {
  uint8 position;
  uint8 x;
  uint8 y;
  uint32 coinR;
  uint32 coinG;
  uint32 coinB;
  uint32 coinSTABLE;
  uint32 stamina;
}

library Player {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](8);
    _schema[0] = SchemaType.UINT8;
    _schema[1] = SchemaType.UINT8;
    _schema[2] = SchemaType.UINT8;
    _schema[3] = SchemaType.UINT32;
    _schema[4] = SchemaType.UINT32;
    _schema[5] = SchemaType.UINT32;
    _schema[6] = SchemaType.UINT32;
    _schema[7] = SchemaType.UINT32;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](8);
    _fieldNames[0] = "position";
    _fieldNames[1] = "x";
    _fieldNames[2] = "y";
    _fieldNames[3] = "coinR";
    _fieldNames[4] = "coinG";
    _fieldNames[5] = "coinB";
    _fieldNames[6] = "coinSTABLE";
    _fieldNames[7] = "stamina";
    return ("Player", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get position */
  function getPosition(bytes32 key) internal view returns (uint8 position) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get position (using the specified store) */
  function getPosition(IStore _store, bytes32 key) internal view returns (uint8 position) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set position */
  function setPosition(bytes32 key, uint8 position) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((position)));
  }

  /** Set position (using the specified store) */
  function setPosition(IStore _store, bytes32 key, uint8 position) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((position)));
  }

  /** Get x */
  function getX(bytes32 key) internal view returns (uint8 x) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get x (using the specified store) */
  function getX(IStore _store, bytes32 key) internal view returns (uint8 x) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set x */
  function setX(bytes32 key, uint8 x) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((x)));
  }

  /** Set x (using the specified store) */
  function setX(IStore _store, bytes32 key, uint8 x) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((x)));
  }

  /** Get y */
  function getY(bytes32 key) internal view returns (uint8 y) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get y (using the specified store) */
  function getY(IStore _store, bytes32 key) internal view returns (uint8 y) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set y */
  function setY(bytes32 key, uint8 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((y)));
  }

  /** Set y (using the specified store) */
  function setY(IStore _store, bytes32 key, uint8 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((y)));
  }

  /** Get coinR */
  function getCoinR(bytes32 key) internal view returns (uint32 coinR) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get coinR (using the specified store) */
  function getCoinR(IStore _store, bytes32 key) internal view returns (uint32 coinR) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set coinR */
  function setCoinR(bytes32 key, uint32 coinR) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((coinR)));
  }

  /** Set coinR (using the specified store) */
  function setCoinR(IStore _store, bytes32 key, uint32 coinR) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((coinR)));
  }

  /** Get coinG */
  function getCoinG(bytes32 key) internal view returns (uint32 coinG) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get coinG (using the specified store) */
  function getCoinG(IStore _store, bytes32 key) internal view returns (uint32 coinG) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set coinG */
  function setCoinG(bytes32 key, uint32 coinG) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 4, abi.encodePacked((coinG)));
  }

  /** Set coinG (using the specified store) */
  function setCoinG(IStore _store, bytes32 key, uint32 coinG) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 4, abi.encodePacked((coinG)));
  }

  /** Get coinB */
  function getCoinB(bytes32 key) internal view returns (uint32 coinB) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 5);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get coinB (using the specified store) */
  function getCoinB(IStore _store, bytes32 key) internal view returns (uint32 coinB) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 5);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set coinB */
  function setCoinB(bytes32 key, uint32 coinB) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 5, abi.encodePacked((coinB)));
  }

  /** Set coinB (using the specified store) */
  function setCoinB(IStore _store, bytes32 key, uint32 coinB) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 5, abi.encodePacked((coinB)));
  }

  /** Get coinSTABLE */
  function getCoinSTABLE(bytes32 key) internal view returns (uint32 coinSTABLE) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 6);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get coinSTABLE (using the specified store) */
  function getCoinSTABLE(IStore _store, bytes32 key) internal view returns (uint32 coinSTABLE) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 6);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set coinSTABLE */
  function setCoinSTABLE(bytes32 key, uint32 coinSTABLE) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 6, abi.encodePacked((coinSTABLE)));
  }

  /** Set coinSTABLE (using the specified store) */
  function setCoinSTABLE(IStore _store, bytes32 key, uint32 coinSTABLE) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 6, abi.encodePacked((coinSTABLE)));
  }

  /** Get stamina */
  function getStamina(bytes32 key) internal view returns (uint32 stamina) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 7);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get stamina (using the specified store) */
  function getStamina(IStore _store, bytes32 key) internal view returns (uint32 stamina) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 7);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set stamina */
  function setStamina(bytes32 key, uint32 stamina) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 7, abi.encodePacked((stamina)));
  }

  /** Set stamina (using the specified store) */
  function setStamina(IStore _store, bytes32 key, uint32 stamina) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 7, abi.encodePacked((stamina)));
  }

  /** Get the full data */
  function get(bytes32 key) internal view returns (PlayerData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 key) internal view returns (PlayerData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 key,
    uint8 position,
    uint8 x,
    uint8 y,
    uint32 coinR,
    uint32 coinG,
    uint32 coinB,
    uint32 coinSTABLE,
    uint32 stamina
  ) internal {
    bytes memory _data = encode(position, x, y, coinR, coinG, coinB, coinSTABLE, stamina);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 key,
    uint8 position,
    uint8 x,
    uint8 y,
    uint32 coinR,
    uint32 coinG,
    uint32 coinB,
    uint32 coinSTABLE,
    uint32 stamina
  ) internal {
    bytes memory _data = encode(position, x, y, coinR, coinG, coinB, coinSTABLE, stamina);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(bytes32 key, PlayerData memory _table) internal {
    set(
      key,
      _table.position,
      _table.x,
      _table.y,
      _table.coinR,
      _table.coinG,
      _table.coinB,
      _table.coinSTABLE,
      _table.stamina
    );
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 key, PlayerData memory _table) internal {
    set(
      _store,
      key,
      _table.position,
      _table.x,
      _table.y,
      _table.coinR,
      _table.coinG,
      _table.coinB,
      _table.coinSTABLE,
      _table.stamina
    );
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (PlayerData memory _table) {
    _table.position = (uint8(Bytes.slice1(_blob, 0)));

    _table.x = (uint8(Bytes.slice1(_blob, 1)));

    _table.y = (uint8(Bytes.slice1(_blob, 2)));

    _table.coinR = (uint32(Bytes.slice4(_blob, 3)));

    _table.coinG = (uint32(Bytes.slice4(_blob, 7)));

    _table.coinB = (uint32(Bytes.slice4(_blob, 11)));

    _table.coinSTABLE = (uint32(Bytes.slice4(_blob, 15)));

    _table.stamina = (uint32(Bytes.slice4(_blob, 19)));
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    uint8 position,
    uint8 x,
    uint8 y,
    uint32 coinR,
    uint32 coinG,
    uint32 coinB,
    uint32 coinSTABLE,
    uint32 stamina
  ) internal view returns (bytes memory) {
    return abi.encodePacked(position, x, y, coinR, coinG, coinB, coinSTABLE, stamina);
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 key) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
