// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("Map")));
bytes32 constant MapTableId = _tableId;

struct MapData {
  uint64 uniqueId;
  uint8 playersIn;
  uint8 dimension;
  bool locationsInitialized;
}

library Map {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](4);
    _schema[0] = SchemaType.UINT64;
    _schema[1] = SchemaType.UINT8;
    _schema[2] = SchemaType.UINT8;
    _schema[3] = SchemaType.BOOL;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](0);

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](4);
    _fieldNames[0] = "uniqueId";
    _fieldNames[1] = "playersIn";
    _fieldNames[2] = "dimension";
    _fieldNames[3] = "locationsInitialized";
    return ("Map", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get uniqueId */
  function getUniqueId() internal view returns (uint64 uniqueId) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (uint64(Bytes.slice8(_blob, 0)));
  }

  /** Get uniqueId (using the specified store) */
  function getUniqueId(IStore _store) internal view returns (uint64 uniqueId) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (uint64(Bytes.slice8(_blob, 0)));
  }

  /** Set uniqueId */
  function setUniqueId(uint64 uniqueId) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((uniqueId)));
  }

  /** Set uniqueId (using the specified store) */
  function setUniqueId(IStore _store, uint64 uniqueId) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((uniqueId)));
  }

  /** Get playersIn */
  function getPlayersIn() internal view returns (uint8 playersIn) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get playersIn (using the specified store) */
  function getPlayersIn(IStore _store) internal view returns (uint8 playersIn) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set playersIn */
  function setPlayersIn(uint8 playersIn) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((playersIn)));
  }

  /** Set playersIn (using the specified store) */
  function setPlayersIn(IStore _store, uint8 playersIn) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((playersIn)));
  }

  /** Get dimension */
  function getDimension() internal view returns (uint8 dimension) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get dimension (using the specified store) */
  function getDimension(IStore _store) internal view returns (uint8 dimension) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set dimension */
  function setDimension(uint8 dimension) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((dimension)));
  }

  /** Set dimension (using the specified store) */
  function setDimension(IStore _store, uint8 dimension) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((dimension)));
  }

  /** Get locationsInitialized */
  function getLocationsInitialized() internal view returns (bool locationsInitialized) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Get locationsInitialized (using the specified store) */
  function getLocationsInitialized(IStore _store) internal view returns (bool locationsInitialized) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Set locationsInitialized */
  function setLocationsInitialized(bool locationsInitialized) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((locationsInitialized)));
  }

  /** Set locationsInitialized (using the specified store) */
  function setLocationsInitialized(IStore _store, bool locationsInitialized) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((locationsInitialized)));
  }

  /** Get the full data */
  function get() internal view returns (MapData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store) internal view returns (MapData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(uint64 uniqueId, uint8 playersIn, uint8 dimension, bool locationsInitialized) internal {
    bytes memory _data = encode(uniqueId, playersIn, dimension, locationsInitialized);

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(IStore _store, uint64 uniqueId, uint8 playersIn, uint8 dimension, bool locationsInitialized) internal {
    bytes memory _data = encode(uniqueId, playersIn, dimension, locationsInitialized);

    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(MapData memory _table) internal {
    set(_table.uniqueId, _table.playersIn, _table.dimension, _table.locationsInitialized);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, MapData memory _table) internal {
    set(_store, _table.uniqueId, _table.playersIn, _table.dimension, _table.locationsInitialized);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (MapData memory _table) {
    _table.uniqueId = (uint64(Bytes.slice8(_blob, 0)));

    _table.playersIn = (uint8(Bytes.slice1(_blob, 8)));

    _table.dimension = (uint8(Bytes.slice1(_blob, 9)));

    _table.locationsInitialized = (_toBool(uint8(Bytes.slice1(_blob, 10))));
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    uint64 uniqueId,
    uint8 playersIn,
    uint8 dimension,
    bool locationsInitialized
  ) internal view returns (bytes memory) {
    return abi.encodePacked(uniqueId, playersIn, dimension, locationsInitialized);
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple() internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](0);
  }

  /* Delete all data for given keys */
  function deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.deleteRecord(_tableId, _keyTuple);
  }
}

function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
