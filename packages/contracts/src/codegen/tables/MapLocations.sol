// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

// Import user types
import { Structures, Colors } from "./../Types.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("MapLocations")));
bytes32 constant MapLocationsTableId = _tableId;

struct MapLocationsData {
  Structures kind;
  address owner;
  Colors color;
  uint8 x_;
  uint8 y_;
}

library MapLocations {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](5);
    _schema[0] = SchemaType.UINT8;
    _schema[1] = SchemaType.ADDRESS;
    _schema[2] = SchemaType.UINT8;
    _schema[3] = SchemaType.UINT8;
    _schema[4] = SchemaType.UINT8;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](2);
    _schema[0] = SchemaType.UINT8;
    _schema[1] = SchemaType.UINT8;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](5);
    _fieldNames[0] = "kind";
    _fieldNames[1] = "owner";
    _fieldNames[2] = "color";
    _fieldNames[3] = "x_";
    _fieldNames[4] = "y_";
    return ("MapLocations", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get kind */
  function getKind(uint8 x, uint8 y) internal view returns (Structures kind) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return Structures(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get kind (using the specified store) */
  function getKind(IStore _store, uint8 x, uint8 y) internal view returns (Structures kind) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return Structures(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set kind */
  function setKind(uint8 x, uint8 y, Structures kind) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(kind)));
  }

  /** Set kind (using the specified store) */
  function setKind(IStore _store, uint8 x, uint8 y, Structures kind) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(kind)));
  }

  /** Get owner */
  function getOwner(uint8 x, uint8 y) internal view returns (address owner) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Get owner (using the specified store) */
  function getOwner(IStore _store, uint8 x, uint8 y) internal view returns (address owner) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Set owner */
  function setOwner(uint8 x, uint8 y, address owner) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((owner)));
  }

  /** Set owner (using the specified store) */
  function setOwner(IStore _store, uint8 x, uint8 y, address owner) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((owner)));
  }

  /** Get color */
  function getColor(uint8 x, uint8 y) internal view returns (Colors color) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return Colors(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get color (using the specified store) */
  function getColor(IStore _store, uint8 x, uint8 y) internal view returns (Colors color) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return Colors(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set color */
  function setColor(uint8 x, uint8 y, Colors color) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked(uint8(color)));
  }

  /** Set color (using the specified store) */
  function setColor(IStore _store, uint8 x, uint8 y, Colors color) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked(uint8(color)));
  }

  /** Get x_ */
  function getX_(uint8 x, uint8 y) internal view returns (uint8 x_) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get x_ (using the specified store) */
  function getX_(IStore _store, uint8 x, uint8 y) internal view returns (uint8 x_) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set x_ */
  function setX_(uint8 x, uint8 y, uint8 x_) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((x_)));
  }

  /** Set x_ (using the specified store) */
  function setX_(IStore _store, uint8 x, uint8 y, uint8 x_) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((x_)));
  }

  /** Get y_ */
  function getY_(uint8 x, uint8 y) internal view returns (uint8 y_) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get y_ (using the specified store) */
  function getY_(IStore _store, uint8 x, uint8 y) internal view returns (uint8 y_) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set y_ */
  function setY_(uint8 x, uint8 y, uint8 y_) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    StoreSwitch.setField(_tableId, _keyTuple, 4, abi.encodePacked((y_)));
  }

  /** Set y_ (using the specified store) */
  function setY_(IStore _store, uint8 x, uint8 y, uint8 y_) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    _store.setField(_tableId, _keyTuple, 4, abi.encodePacked((y_)));
  }

  /** Get the full data */
  function get(uint8 x, uint8 y) internal view returns (MapLocationsData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, uint8 x, uint8 y) internal view returns (MapLocationsData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(uint8 x, uint8 y, Structures kind, address owner, Colors color, uint8 x_, uint8 y_) internal {
    bytes memory _data = encode(kind, owner, color, x_, y_);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    uint8 x,
    uint8 y,
    Structures kind,
    address owner,
    Colors color,
    uint8 x_,
    uint8 y_
  ) internal {
    bytes memory _data = encode(kind, owner, color, x_, y_);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(uint8 x, uint8 y, MapLocationsData memory _table) internal {
    set(x, y, _table.kind, _table.owner, _table.color, _table.x_, _table.y_);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, uint8 x, uint8 y, MapLocationsData memory _table) internal {
    set(_store, x, y, _table.kind, _table.owner, _table.color, _table.x_, _table.y_);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (MapLocationsData memory _table) {
    _table.kind = Structures(uint8(Bytes.slice1(_blob, 0)));

    _table.owner = (address(Bytes.slice20(_blob, 1)));

    _table.color = Colors(uint8(Bytes.slice1(_blob, 21)));

    _table.x_ = (uint8(Bytes.slice1(_blob, 22)));

    _table.y_ = (uint8(Bytes.slice1(_blob, 23)));
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    Structures kind,
    address owner,
    Colors color,
    uint8 x_,
    uint8 y_
  ) internal view returns (bytes memory) {
    return abi.encodePacked(kind, owner, color, x_, y_);
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(uint8 x, uint8 y) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));
  }

  /* Delete all data for given keys */
  function deleteRecord(uint8 x, uint8 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, uint8 x, uint8 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
